#include <stdio.h>
#include <stdlib.h>
#include <getopt.h>
#include <stdbool.h>
#include <string.h>

/* Enum representing program search type */
typedef enum {
    SEARCH_PREFIX, SEARCH_EXACT, SEARCH_ANYWHERE, SEARCH_BAD_OPTION
} SearchType;

/* A structure that represents the program options */
typedef struct {
    SearchType search_type;
    bool sort;
    char* pattern;
    char* dictionary_filename;
} Options;

/**
 * Prints the program usage and exits with a specified error code.
 *
 * Params:
 *  stream - The file stream to output the usage message to
 *  exit_code - The exit code which to exit with and terminate execution
 *
 *  Returns: nothing
 */
void print_usage(FILE *stream, int exit_code) {
    fprintf(stream, "Usage: search [-exact|-prefix|-anywhere] [-sort] pattern [filename]\n");
    exit(exit_code);
}

/**
 * Checks whether a command-line argument is an options.
 *
 * Parameters:
 *  argument - The argument string to check if it starts with "-"
 *
 *  Returns: true if it's an option, false otherwise.
 */
bool is_argument_an_option(char* argument) {
    if (strstr(argument, "-") != NULL) {
        return true;
    }

    return false;
}

/**
 * Maps a command-line option to its type.
 *
 * BAD_OPTION is returned if it's an option not expected.
 *
 * Parameters:
 *  option - The command line argument to check
 *
 *  Returns an SearchType enum
 *
 * */
SearchType get_option_type(char* option) {
    
    if (!strcmp(option, "-exact")) {
        return SEARCH_EXACT;         
    }
    else if (!strcmp(option, "-prefix")) {
        return SEARCH_PREFIX;
    }
    else if (!strcmp(option, "-anywhere")) {
        return SEARCH_ANYWHERE;
    } else {
        return SEARCH_BAD_OPTION;
    }
}

Options* parse_options(int argc, char **argv) {
    if ((argc - 1) < 3) {
        return NULL; 
    }

    bool search_exact_found = false;
    bool search_prefix_found = false;
    bool search_anywhere_found = false;

    /* Process command-line options*/
    for(int i = 1; i < argc; i++) {
        
        /* Is argument an option */
        if (is_argument_an_option(argv[i])) {
            
            SearchType search_type = get_option_type(argv[i]);

            switch (search_type) {
                
                case SEARCH_EXACT:
                    if (!search_exact_found) {
                        search_exact_found = true;
                    } else {
                        print_usage(stderr, EXIT_FAILURE);
                    }
                    break;
                case SEARCH_PREFIX:
                    if (!search_prefix_found) {
                        search_prefix_found = true;
                    } else {
                        print_usage(stderr, EXIT_FAILURE);
                    }
                    break;
                case SEARCH_ANYWHERE:
                   if (!search_anywhere_found) {
                        search_anywhere_found = true;
                    } else {
                        print_usage(stderr, EXIT_FAILURE);
                    } 
                break;
                default:
                    print_usage(stderr, EXIT_FAILURE);
                

            }
        }
    }

}


int main(int argc, char **argv) {
   
    Options *options = parse_options(argc, argv);
    if (!options) {
        print_usage(stderr, EXIT_FAILURE);
    }
}
