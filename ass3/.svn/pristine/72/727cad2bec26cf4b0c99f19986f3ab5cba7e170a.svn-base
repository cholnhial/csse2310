#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <strings.h>

#include "utils.h"

char *read_line(FILE *file, int readChunk) {
    int chunkSize = readChunk;
    int characterPosition = 0;
    char *line = malloc(readChunk);
    int charRead;
    while ((charRead = fgetc(file)) != '\n') {
        if (charRead == EOF) {
            return NULL; // indicate we are done reading
        }
        line[characterPosition++] = charRead;
        if (characterPosition == chunkSize) {
            chunkSize += readChunk;
            line = realloc(line, chunkSize);
        }
    }
    line[characterPosition] = 0;

    return line;
}

MessagesList* messages_list_init() {
    MessagesList* list = (MessagesList*) malloc(sizeof(MessagesList));
    list->messages = (char**) malloc(sizeof(char*));
    list->size = 0;
    list->memsize = sizeof(char*);

    return list;
}

void messages_list_add(MessagesList* list, char* message) {
    list->messages[list->size] = message;
    int newSize = list->memsize + sizeof(char*);
    list->memsize = newSize;
    list->messages = (char**) realloc(list->messages, newSize);
    list->size++;
}

void messages_list_free(MessagesList* list) {
    if (list->messages != NULL) {
        free(list->messages);
    }
    if (list != NULL) {
        free(list);
        list = NULL;
    }
}

void print_usage(FILE* file, char* message, int exitCode) {
    fprintf(file, message);

    exit(exitCode);
}

ParsedMessage* parse_message(char* message) {

    if (strstr(message, ":") == NULL) {
        return NULL;
    }

    ParsedMessage* parsedMessage = (ParsedMessage*) malloc(sizeof(ParsedMessage));
    parsedMessage->size = 0;
    parsedMessage->argsMemSize = sizeof(char*);
    parsedMessage->arguments = (char**) malloc(sizeof(char*));
    
    char* token = strtok(message, ":");

    while (token != NULL) {
        parsedMessage->arguments[parsedMessage->size] = (char*) malloc(strlen(token)+1);
        parsedMessage->arguments[parsedMessage->size] = token;
        int argsNewMemSize = parsedMessage->argsMemSize + sizeof(char*);
        parsedMessage->argsMemSize = argsNewMemSize;
        parsedMessage->arguments = (char**) realloc(parsedMessage->arguments, argsNewMemSize);
        parsedMessage->size++;

        token = strtok(NULL, ":");
    }

    parsedMessage->command = parsedMessage->arguments[0];

    return parsedMessage;
}

void free_parsed_message(ParsedMessage* parsedMessage) {
    if (parsedMessage->arguments != NULL) {
        free(parsedMessage->arguments);
    }
}
