#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <stdio.h>

#include "utils.h"

LinkedList* linked_list_new(void) {
    LinkedList* list = (LinkedList*) malloc(sizeof(LinkedList));
    memset(list, 0, sizeof(LinkedList));

    return list;
}


LinkedList* linked_list_add_item(LinkedList* list, void* item) {
    
    if (list->head == NULL) {
        list->head = (LinkedListNode*) malloc(sizeof(LinkedListNode));
        list->head->item = item;
        list->head->next = NULL;
        list->head->previous = NULL;
    } else {
        
        LinkedListNode* current = list->head;

        while (current->next != NULL)
            current = current->next;
        
        // Make the link 
        LinkedListNode* newNode = (LinkedListNode*) malloc(sizeof(LinkedListNode));
        memset(newNode, 0, sizeof(LinkedListNode));
        newNode->item = item;
        newNode->next = current->next;
        
        current->next = newNode;
        newNode->previous = current;


    }
    list->size++;
}

LinkedList* linked_list_add_item_sorted_s(LinkedList* list, char* str) {
    
    if (list->head == NULL) {
        list->head = (LinkedListNode*) malloc(sizeof(LinkedListNode));
        list->head->item = str;
        list->head->next = NULL;
        list->head->previous = NULL;
    } else if(strcasecmp((char*) list->head->item, str) >= 0) {
        // If the new node should be inserted at the beginning of the doubly linked list
        LinkedListNode* newNode = (LinkedListNode*) malloc(sizeof(LinkedListNode));
        memset(newNode, 0, sizeof(LinkedListNode));
        newNode->next = list->head;
        newNode->next->previous = newNode;
        list->head = newNode;
    } else {
        LinkedListNode* current = list->head;

        // Locate the node where the new node is to be inserted in front of
        while (current->next != NULL && strcasecmp((char*) current->next->item, str) < 0)
            current = current->next;
        
        // Make the link 
        LinkedListNode* newNode = (LinkedListNode*) malloc(sizeof(LinkedListNode));
        memset(newNode, 0, sizeof(LinkedListNode));
        newNode->item = str;
        newNode->next = current->next;
        
        // If the new node was not inserted at the end 
        if (current->next != NULL) {
            newNode->next->previous = newNode;
        }
        
        current->next = newNode;
        newNode->previous = current;
    }

    list->size++;

    return list;
}



LinkedList* linked_list_remove_item(LinkedList* list, void* item) {
    
    if (list->head != NULL) {
        LinkedListNode* current = list->head;
        
        // Find the element to be removed
        while (current->next != NULL && current->next->item != &item) 
            current = current->next;

        // Is head only remaining
        if (current->next == NULL && current->previous == NULL) {
            list->head = NULL;
        } else if (current != NULL && current->next == NULL) {  
            // is this the last item?
            current->previous->next = NULL;
        } else if(current != NULL && current->next != NULL) {
            // the item is somewhere in the middle
            current->previous->next = current->next;
            current->next->previous = current->previous;
        }
        free(current);
        list->size--;
    }
   
    return list;
}

void linked_list_print(LinkedList* list, FILE* stream, char* formatString) {
    LinkedListNode* current = list->head;

    while(current != NULL) {
        fprintf(stream, formatString, current->item);
        current = current->next;
    }
}

void linked_list_free(LinkedList* list) {
    if (list == NULL) { 
        return;
    };

    if (list->head != NULL) {
        LinkedListNode* current = list->head;
        while (current->next != NULL) {
            LinkedListNode* toBeFreed = current;
            current = current->next;
            free(toBeFreed);
            toBeFreed = NULL;
        }
    }
    free(list);
    list = NULL;
}


int main(int argc, char** argv) {
    LinkedList* list = linked_list_new();

    for(int i = 1; i < argc; i++) {
       linked_list_add_item_sorted_s(list, argv[i]);
    }
    linked_list_remove_item(list, argv[1]);
    linked_list_remove_item(list, argv[4]);



    linked_list_print(list, stdout, "%s\n");
    linked_list_free(list);
}
